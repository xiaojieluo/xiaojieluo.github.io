<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hola</title>
    <link>https://xiaojieluo.com/</link>
    <description>Recent content on Hola</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 26 Nov 2020 22:14:29 +0800</lastBuildDate><atom:link href="https://xiaojieluo.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Me</title>
      <link>https://xiaojieluo.com/about/</link>
      <pubDate>Thu, 17 Dec 2020 01:48:18 +0800</pubDate>
      
      <guid>https://xiaojieluo.com/about/</guid>
      <description>This is Me!</description>
    </item>
    
    <item>
      <title>Python中星号的高级用法</title>
      <link>https://xiaojieluo.com/posts/python%E4%B8%AD%E6%98%9F%E5%8F%B7%E7%9A%84%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/</link>
      <pubDate>Thu, 26 Nov 2020 22:14:29 +0800</pubDate>
      
      <guid>https://xiaojieluo.com/posts/python%E4%B8%AD%E6%98%9F%E5%8F%B7%E7%9A%84%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/</guid>
      <description>&lt;p&gt;星号，即乘法运算符，是所有程序中的常用符号。对于我们来说，仅将其用作乘法运算符就足够了。但是，如果真的想成为一名 Python 专家，则必须要掌握星号运算符的高级用法。&lt;/p&gt;
&lt;p&gt;这篇文章将展示星号运算符的五种用法，从基础到深入，提供最容易理解的示例。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>通过实例学习python的fstring</title>
      <link>https://xiaojieluo.com/posts/%E9%80%9A%E8%BF%87%E5%AE%9E%E4%BE%8B%E5%AD%A6%E4%B9%A0python%E7%9A%84fstring/</link>
      <pubDate>Sat, 14 Nov 2020 10:01:33 +0800</pubDate>
      
      <guid>https://xiaojieluo.com/posts/%E9%80%9A%E8%BF%87%E5%AE%9E%E4%BE%8B%E5%AD%A6%E4%B9%A0python%E7%9A%84fstring/</guid>
      <description>&lt;h2 id=&#34;1-什么是-python-的-f-string&#34;&gt;1. 什么是 Python 的 F-String&lt;/h2&gt;
&lt;p&gt;在 Python 的历史中，字符串格式已经发展了很久， 在 Python 3.6 之前，如果想要格式化字符串，可以用 &lt;code&gt;%&lt;/code&gt; 操作符或者 &lt;code&gt;string.Template&lt;/code&gt; 模块，随后出现了 &lt;code&gt;str.format&lt;/code&gt; 方法，并为语言中添加了一种更灵活，更健壮的格式化字符串的方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PySide2中加载ui文件的两种方法比较</title>
      <link>https://xiaojieluo.com/posts/pyside2%E4%B8%AD%E5%8A%A0%E8%BD%BDui%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95%E6%AF%94%E8%BE%83/</link>
      <pubDate>Thu, 12 Sep 2019 13:10:35 +0800</pubDate>
      
      <guid>https://xiaojieluo.com/posts/pyside2%E4%B8%AD%E5%8A%A0%E8%BD%BDui%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95%E6%AF%94%E8%BE%83/</guid>
      <description>&lt;p&gt;先将 QtDesigner 生成的.ui 文件转换成 python 类，再在项目中导入这个类。&lt;/p&gt;
&lt;p&gt;可以使用 &lt;code&gt;pyside2-uic&lt;/code&gt; 这个工具来实现 ui 文件转 python 类的操作，执行以下命令即可：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;    pyside2-uic mainwindow.ui -o ui_mainwindow.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>使用awk解决ArchLinux升级冲突</title>
      <link>https://xiaojieluo.com/posts/%E4%BD%BF%E7%94%A8awk%E8%A7%A3%E5%86%B3archlinux%E5%8D%87%E7%BA%A7%E5%86%B2%E7%AA%81/</link>
      <pubDate>Tue, 16 May 2017 15:00:00 +0800</pubDate>
      
      <guid>https://xiaojieluo.com/posts/%E4%BD%BF%E7%94%A8awk%E8%A7%A3%E5%86%B3archlinux%E5%8D%87%E7%BA%A7%E5%86%B2%E7%AA%81/</guid>
      <description>今天在升级 Archlinux 时发现无法升级，按照 Archlinux Wiki的说法，就是文件冲突了，而 pacman 又不会自动覆盖已存在的文件。
解决方法也很简单，重命名冲突的文件就可以了。文件少点直接手动修改就好了，不过如果有许多需要重命名的文件，就要用到 awk 来自动化处理
提取冲突文件 从 pacman 升级过程中提取有冲突的文件，使用下列命令将 pacman -Syu 的运行结果写入 error.txt 中，方便后续 awk 处理
pacman -Syu &amp;gt; error.txt 处理提取文件 打开 error.txt ，删除不需要的信息，只保留有冲突错误信息的部分，然后保存。
批量重命名冲突文件 现在在命令行执行 awk 命令，批量重命名有冲突的文件（删除也可以，不过小心为上，建议重命名，如果升级有问题，可以逆向恢复）
sudo awk &amp;#39;{print &amp;#34;mv &amp;#34; $2 &amp;#34; &amp;#34; $2&amp;#34;_bak&amp;#34; | &amp;#34;bash&amp;#34;}&amp;#39; error.txt 正常情况下执行上面命令是没有任何输出的，最后就可以运行 pacman -Syu 正常升级系统
参考网站 在awk中运行shell命令
awk学习笔记</description>
    </item>
    
    <item>
      <title>Tornado中finish之后调用write出现错误</title>
      <link>https://xiaojieluo.com/posts/tornado%E4%B8%ADfinish%E4%B9%8B%E5%90%8E%E8%B0%83%E7%94%A8write%E5%87%BA%E7%8E%B0%E9%94%99%E8%AF%AF/</link>
      <pubDate>Thu, 23 Feb 2017 13:57:04 +0800</pubDate>
      
      <guid>https://xiaojieluo.com/posts/tornado%E4%B8%ADfinish%E4%B9%8B%E5%90%8E%E8%B0%83%E7%94%A8write%E5%87%BA%E7%8E%B0%E9%94%99%E8%AF%AF/</guid>
      <description>参考了 知乎上的答案 , 但是没有实现我想要的效果，最终在翻 tornado.web 的源代码时，找到了一个解决办法
在需要结束的地方抛出个 Finish() 异常就可以了，暂时还不清楚 Tornado 是如何处理这个异常的，以后有时间再看下实现过程
example: from tornado.web import Finish ... ... class IndexHandler(RequestHandler): def get(self): self.write(&amp;#34;Hello&amp;#34;) raise Finish() self.write(&amp;#34;World&amp;#34;) </description>
    </item>
    
    <item>
      <title>使python3终端print输出不换行的方案</title>
      <link>https://xiaojieluo.com/posts/%E4%BD%BFpython3%E7%BB%88%E7%AB%AFprint%E8%BE%93%E5%87%BA%E4%B8%8D%E6%8D%A2%E8%A1%8C%E7%9A%84%E6%96%B9%E6%A1%88/</link>
      <pubDate>Sun, 12 Feb 2017 03:40:26 +0800</pubDate>
      
      <guid>https://xiaojieluo.com/posts/%E4%BD%BFpython3%E7%BB%88%E7%AB%AFprint%E8%BE%93%E5%87%BA%E4%B8%8D%E6%8D%A2%E8%A1%8C%E7%9A%84%E6%96%B9%E6%A1%88/</guid>
      <description>用python3做进度条的时候，需要输出两个print，一个显示开始，一个显示结果，这就需要两个print的输出在同一行上
通过io库实现 这是来自贴吧大神的解决方案，另辟奚径，挺有意思的。
import io output = io.StringIO() output.write(&amp;#39;First line.&amp;#39;) print(&amp;#39;Second line.&amp;#39;, file=output) contents = output.getvalue()+&amp;#39;\r&amp;#39; output.close() print(contents) 通过设置print第二个参数 根据 官方手册的说法，python3 中 print 默认在输出后面加上当前平台的换行符，我们只要禁用这个功能，就可以实现两个 print 输出在同一行了：
print(&amp;#34;First line.&amp;#34;, end=&amp;#39;&amp;#39;) # 要在输出的最后加上\r，否则会有特殊字符出现，原因不明 print(&amp;#34;Second line.\r&amp;#34;, end=&amp;#39;&amp;#39;) </description>
    </item>
    
    <item>
      <title>在函数中if,return,else的问题</title>
      <link>https://xiaojieluo.com/posts/%E5%9C%A8%E5%87%BD%E6%95%B0%E4%B8%ADifreturnelse%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 05 Feb 2017 15:27:15 +0800</pubDate>
      
      <guid>https://xiaojieluo.com/posts/%E5%9C%A8%E5%87%BD%E6%95%B0%E4%B8%ADifreturnelse%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>首先有这么一个函数：
def parity(x = 10): &amp;#34;&amp;#34;&amp;#34; 判断奇偶性 奇数返回false 偶数返回true &amp;#34;&amp;#34;&amp;#34; if x%2 == 0: return true else: return false 实际运行，上面函数能很好的完成想要实现的功能，但是如果把 if 之后的程序修改下：
def parity(x = 10): &amp;#34;&amp;#34;&amp;#34; 判断奇偶性 奇数返回false 偶数返回true &amp;#34;&amp;#34;&amp;#34; if x%2 == 0: return true return false 应该也是可以的，函数在返回 true 后就会抛弃掉后面的程序,阻断了 false 的 return.</description>
    </item>
    
    <item>
      <title>Mongodb仅返回与当前查询条件相匹配的内嵌文档</title>
      <link>https://xiaojieluo.com/posts/mongodb%E4%BB%85%E8%BF%94%E5%9B%9E%E4%B8%8E%E5%BD%93%E5%89%8D%E6%9F%A5%E8%AF%A2%E6%9D%A1%E4%BB%B6%E7%9B%B8%E5%8C%B9%E9%85%8D%E7%9A%84%E5%86%85%E5%B5%8C%E6%96%87%E6%A1%A3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xiaojieluo.com/posts/mongodb%E4%BB%85%E8%BF%94%E5%9B%9E%E4%B8%8E%E5%BD%93%E5%89%8D%E6%9F%A5%E8%AF%A2%E6%9D%A1%E4%BB%B6%E7%9B%B8%E5%8C%B9%E9%85%8D%E7%9A%84%E5%86%85%E5%B5%8C%E6%96%87%E6%A1%A3/</guid>
      <description>先假设有一下文档:
db.blog.insert({ &amp;#34;_id&amp;#34;:&amp;#34;1&amp;#34;, &amp;#34;title&amp;#34;:&amp;#34;first article&amp;#34;, &amp;#34;comments&amp;#34;:[ {&amp;#34;name&amp;#34;:&amp;#34;jack&amp;#34;,&amp;#34;score&amp;#34;:3,&amp;#34;comment&amp;#34;:&amp;#34;good&amp;#34;}, {&amp;#34;name&amp;#34;:&amp;#34;helen&amp;#34;,&amp;#34;score&amp;#34;:4,&amp;#34;comment&amp;#34;:&amp;#34;nice&amp;#34;}, {&amp;#34;name&amp;#34;:&amp;#34;jeason&amp;#34;,&amp;#34;score&amp;#34;:5,&amp;#34;comment&amp;#34;:&amp;#34;ok&amp;#34;}, ] }) 数组里面包含内嵌文档的查询 如果想查询包含 jack 评论的内嵌文档,可以用 $elemMatch 操作符:
db.blog.find({&amp;#34;comments&amp;#34;:{ &amp;#34;$elemMatch&amp;#34;:{&amp;#34;name&amp;#34;:&amp;#34;jack&amp;#34;} }}) 也可以使用 . 操作符:
db.blog.find({&amp;#34;comments.name&amp;#34;:&amp;#34;jack&amp;#34;) 返回与查询条件相匹配的任意一个数组元素 我们可以使用 $slice 操作符来限定返回的数组元素,但是如果我们想返回与查询条件相匹配的那个元素的话,可以使用 数组名+&#39;.$&#39; 来进行限制:
db.blog.find({&amp;#34;comments.name&amp;#34;:&amp;#34;jack&amp;#34;,{&amp;#34;comments.$&amp;#34;:1}) </description>
    </item>
    
  </channel>
</rss>
